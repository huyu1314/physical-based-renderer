cmake_minimum_required(VERSION 3.0)

project(AwesomeRenderer)

option(GLFW_BUILD_DOCS OFF)
option(GLFW_BUILD_EXAMPLES OFF)
option(GLFW_BUILD_TESTS OFF)

option(ASSIMP_BUILD_ASSIMP_TOOLS OFF)
option(ASSIMP_BUILD_SAMPLES OFF)
option(ASSIMP_BUILD_TESTS OFF)

set(CMAKE_CXX_STANDARD 14)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)
# set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

include(macros)
# include(modules/sanitizers_support)
# include(modules/clang_tidy_support)
# include(modules/add_ide_support)

detect_platform()
print_info()
set_output_paths()

add_subdirectory_ex(3rdpart)

include_directories(
src/engine/real_time_pbr/camera/
src/engine/real_time_pbr/lighting/
src/engine/real_time_pbr/mesh/
src/engine/real_time_pbr/resources/
# src/engine/ray_tracing/
# src/engine/ray_tracing_in_one_weekend/
# src/engine/renderer/
src/editor/core/
src/editor/mesh/
3rdpart/glad/include/
3rdpart/assimp/assimp/include/
3rdpart/glfw/include/
3rdpart/glm/
3rdpart/stb/
3rdpart/imgui/
)

FILE(GLOB API_SOURCES 
3rdpart/glad/src/glad.c
3rdpart/imgui/*.cpp
)

FILE(GLOB PROJECT_HEAD
src/engine/renderer/the_renderer.h
src/engine/ray_tracing/*.h
src/engine/ray_tracing_in_one_weekend/*.h*
src/editor/mesh/*.h
src/editor/core/*.h
)

FILE(GLOB PROJECT_SOURCES
src/engine/ray_tracing/*.cpp
src/engine/ray_tracing_in_one_weekend/*.cpp
src/engine/renderer/the_renderer.cpp
)

FILE(GLOB REAL_TIME_PBR
src/engine/real_time_pbr/camera/*.h
src/engine/real_time_pbr/mesh/*.h
src/engine/real_time_pbr/lighting/*.h
src/engine/real_time_pbr/resources/*.h

src/engine/real_time_pbr/camera/*.cpp
src/engine/real_time_pbr/lighting/*.cpp
src/engine/real_time_pbr/mesh/*.cpp
src/engine/real_time_pbr/resources/*.cpp
)

FILE(GLOB PROJECT_CONFIGS
CmakeLists.txt
.gitignore
.gitmodules
TODO.md
README.md
LICENSE
)

source_group("API" FILES ${API_SOURCES})
source_group("Headers" FILES ${PROJECT_HEAD})
source_group("Sources" FILES ${PROJECT_SOURCES})
source_group("RealtimePBR" FILES ${REAL_TIME_PBR})

add_executable(AwesomeRenderer
${PROJECT_CONFIGS}
${PROJECT_HEAD}
${PROJECT_SOURCES}
${API_SOURCES}
${REAL_TIME_PBR}
src/main.cpp
)

target_link_libraries(${PROJECT_NAME} glfw)
target_link_libraries(${PROJECT_NAME} assimp)

add_definitions(-DGLFW_INCLUDE_NONE
    -DPROJECT_SOURCE_DIR=\"${PROJECT_SOURCE_DIR}\")
link_directories(${AwesomeRenderer_SOURCE_DIR})